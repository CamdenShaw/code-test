/*
 * Set up node on start
 * Used net because that was the lesson at RED Academy, so it 
 * is what I am familiar with
*/

const net = require("net"),
    fs = require("fs"),
    LineAnalyser = require("./src/LineAnalyser"),
    spiel = fs.readFileSync("./data/mylogfile.log", "utf8"),
    server = net.createServer()

let remoteAddress, conn

/* handles initial connection */
server.on("connection", handleConnection)

/* handles additional connections on port 9000 (with netcat) */
server.listen(9000, () => {
    /* lets server admin know another user is online */
    console.log("server listening to %j", server.address())
})

/* creates new custom duplex stream */
dataAnalysis = new LineAnalyser(spiel)

/* passes data into the new duplex stream */
function handleData(data) {
    /* console logged the data so I could be sure the data I 
    intended to load is loading */
    console.log(
        `${remoteAddress ? remoteAddress : "Server"} has loaded data: "${data}"`,
        typeof data
    )

    /* handle information sent from netcat connection */
    conn &&
        conn.write(
            `Received message: ${data.trim()}\n Let me make sure you read that: ${data
                .toUpperCase() // to upper case just cause
                .trim()}\n` // trim the new line generated by hitting enter to submit
        )

    /* use custom duplex stream to read data and log it to 
    console so I know it is working */
    dataAnalysis.on("readable", () => {
        let chunk
        while (null !== (chunk = dataAnalysis.read())) {
            console.log("read: ", chunk.toString())
        }
    })
    /* stop duplex stream's timer function */
    dataAnalysis.stopTimer()

    /* begin writing sent into the duplex stream */
    dataAnalysis.write(data)
    /* stop duplex streams timer function */
    dataAnalysis.stopTimer()
}

/* inject data into the duplex stream on start */
handleData(spiel)

/* handle the connection */
function handleConnection(conn) {
    /* set remote address */
    remoteAddress = `${conn.remoteAddress}: ${conn.remotePort}`
    /* let node admin know that remote address is working */
    console.log(`new client connection from ${remoteAddress}`)

    /* set default encoding from netcat connections to utf8 */
    conn.setEncoding("utf8")

    /* handle close of netcat connection, let node admin know 
    that connection has closed */
    function handleClose() {
        console.log(`${remoteAddress} has closed`)
        dataAnalysis.end()
    }

    /* handle netcat connection error, let node admin know 
    that connection had an error */
    function handleError(e) {
        console.log(`${remoteAddress} has experienced an error: ${e.message}`)
    }

    /* call connection close, error and data instances */
    conn.on("close", handleClose)
    conn.on("error", handleError)
    conn.on("data", handleData)
}
